# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the main branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  workflow_run:
    workflows: [ "CODDE Manager Build" ]
    types:
      - completed
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GOOGLE_APP_ID }}
  INSTANCE_LOCATION: us-central1
  INSTANCE_ZONE: us-central1-c
  DEPLOYMENT_NAME: apt-deployment
  REPO: codde-repo
  REPO_ZONE: europe-west3
  INSTANCE: vm-dopymanager

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0.3.1'
      with:
        # create_credentials_file: true
        token_format: 'access_token'
        workload_identity_provider: ${{ WORKFLOW_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT }}
    - name: Get Version
      run: |
        echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV
    - name: Get Description
      run: |
        echo "DESCRIPTION=$(sed -n '2{p;q}' README.md)" >> $GITHUB_ENV
    - name: Apt Update
      run: |
        gcloud compute ssh $INSTANCE --zone=$INSTANCE_ZONE --command="sudo apt update"
    - name: Check Artifact Registery
      run: |
        gcloud compute ssh $INSTANCE --zone=$INSTANCE_ZONE --command="echo 'deb ar+https://$INSTANCE_LOCATION-apt.pkg.dev/projects/$PROJECT_ID $REPO main' | sudo tee -a  /etc/apt/sources.list.d/artifact-registry.list"
    - name: Upload deb package
      run: |
        gcloud compute scp /dist/codde-manager_$VERSION_armhf.deb $INSTANCE:~
    - name: Upload Repo
      run: |
        gcloud compute ssh $INSTANCE --zone=$INSTANCE_ZONE --command="gcloud beta artifacts apt upload $REPO --location=$REPO_LOCATION --source=codde-manager_$VERSION_armhf.deb"
    - name: Update
      run: |
        gcloud compute ssh $INSTANCE --zone=$INSTANCE_ZONE --command="sudo apt update"
